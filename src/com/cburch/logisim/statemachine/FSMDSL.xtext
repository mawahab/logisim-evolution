grammar com.cburch.logisim.statemachine.FSMDSL with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate fSMDSL "http://www.cburch.com/logisim/statemachine/FSMDSL"

TOP: 
	FSM | 
//	ShortFSM |
	ConstantDefList |
	CommandStmt | 
	PredicateStmt |
	EQNSpec 
;

CommandStmt :
	'[' (cst+=ConstantDef (',' cst+=ConstantDef )*)? ']'
	'[' (in+=ShortInputPort (',' in+=ShortInputPort )*)? ']'
	'[' (out+=ShortOutputPort (',' out+=ShortOutputPort )*)?']'
	(commands+=Command (';')?) (commands+=Command (';')?)*
;

ConstantDefList:
	((constants+=ConstantDef (';' constants+=ConstantDef)*) ';' )?
;
PredicateStmt :
	'[' (cst+=ConstantDef (',' cst+=ConstantDef )*)? ']'
	'[' (in+=ShortInputPort (',' in+=ShortInputPort )*)? ']' predicate=Predicate ';'
;


EQNSpec :
	
	'INORDER' '=' (in+=ShortInputPort (',' in+=ShortInputPort )*)?  ';'
	'OUTORDER' '=' (outNames+=ID(',' outNames+=ID )*)?  ';'
	(eqns+=EQNAssignement)+

;
EQNAssignement:
 	lhs=ShortOutputPort '=' rhs=OrPla ';'
 ; 
 

OrPla returns BoolExpr:
	AndPla (({OrExpr.args+=current})'+' args+=And)*;
	
AndPla returns BoolExpr:
	PrimaryPla (({AndExpr.args+=current})'*' args+=PrimaryPla)*;
	
PrimaryPla returns BoolExpr:
	('(' OrPla ')')
	| NotPla
	| PortRefPla
	;
	 
NotPla returns BoolExpr:
	{NotExpr}'!' args+=PrimaryPla;
	
PortRefPla returns BoolExpr:
	{PortRef} port=[Port];


 /*
 INORDER = keypad_3 keypad_2 keypad_1 keypad_0 A_0 cs_0 cs_1;
OUTORDER = X_2 X_1 X_0 ns_0 ns_1 ns_2;
n15 = A_0 * cs_1;
n16 = keypad_3 * keypad_2;
n17 = !keypad_1 * !keypad_0;
n18 = n16 * n17;
n19 = !cs_0 * n15;
n20 = !n18 * n19;
n21 = keypad_3 * !keypad_2;
n22 = keypad_1 * !keypad_0;
n23 = cs_0 * !cs_1;
n24 = n22 * n23;
n25 = n21 * n24;
X_2 = n20 + n25;
n27 = !cs_0 * !n15;
n28 = !cs_0 * !n18;
n29 = cs_1 * !n28;
X_1 = n27 + n29;
X_0 = 0;
ns_0 = 0;
ns_1 = X_2;
ns_2 = X_1;
 
 
 * 
 */	


FSM returns FSM:
{FSM}("fsm"|"state_machine") name=ID layout=LayoutInfo '{'
	
	(constants+=ConstantDef ';')* 
	(('in' (in+=InputPort)+ | ('out' (out+=OutputPort)+)))+
	("codeWidth" "=" width=INT ';')
	("reset" "=" start=[State] ';')
	(states+=(LongState| ShortState))*
'}'	
;

//ShortFSM returns FSM:
//{FSM}name=ID '{'
//	(layout=LayoutInfo)?  
////	(constants+=ConstantDef ';')* 
////	('in' (in+=InputPort)+ )?
////	('out' (out+=OutputPort)+)?
//	("codeWidth" "=" width=INT ';')?
//	("reset" "=" start=[State] ';')?
////	(states+=ShortState)*
//'}'	
//;

FSMElement: 
	FSM | 
	InputPort | 
	OutputPort | 
	CommandList | 
	LongState | 
	DotTransition | 
	ShortState | 
	GotoTransition
; 
	
//Port :
//	name=ID width=INT (layout=LayoutInfo) ;
//;
Port :  InputPort | OutputPort;

ShortInputPort returns Port:
	{InputPort} name =ID ('[' width=INT']')? 
;
ShortOutputPort returns Port:
	{OutputPort} name =ID ('[' width=INT']')? 
;
ShortTmpPort returns Port:
	{TemporayPort} name =ID ('[' width=INT']')? 
;

InputPort returns Port:
	 {InputPort} name =ID ('[' width=INT']')? (layout=LayoutInfo) ';';
 	
OutputPort returns Port:
	{OutputPort} name=ID ('[' width=INT']')? (layout=LayoutInfo) ';';


CommandList :
	{CommandList}
	(('commands' (layout=LayoutInfo) '{'
			(commands+=Command)*
	'}')) 
;

LayoutInfo  returns LayoutInfo :
	{LayoutInfo}('@' '[' x=INT',' y=INT (',' width=INT',' height=INT)?  ']')?
;

LongState returns State:
	{State}'state' name=ID ('=' code=BIN )? (layout=LayoutInfo) '{'
		(commandList=CommandList)?
		('transitions' '{'
			(transition+=(DotTransition))*
		'}')? 
	'}';

ShortState returns State:
	'state' name=ID ('[' code=BIN ']')?  ':'
		layout=LayoutInfo
		commandList=ShortCommandList
		(transition+=GotoTransition)*
	;

ShortCommandList returns CommandList:
	{CommandList} ('set'  (commands+=Command)+ layout=LayoutInfo )?
;

GotoTransition returns Transition:
	"goto" dst=[State] ('when' predicate=Predicate)?  layout=LayoutInfo ';';
 
DotTransition returns Transition:
	(((src=[State])? '->')) dst=[State] ('when' predicate=Predicate)? (layout=LayoutInfo) ';';
 
Command:
	name=[OutputPort] '=' value=(Or) ';';
	
ConcatExpr returns BoolExpr:
	{ConcatExpr}'{' args+=Or (',' args+=Or)* '}'
;
//Port : 
//	name=ID ('[' width=INT']')? (layout=LayoutInfo) ';';


PortRef returns BoolExpr:
	{PortRef} port=[Port] (range=Range)?	
;
 
ConstRef returns BoolExpr:
	{ConstRef} ('#') const=[ConstantDef]
;
Range :
	'[' ((ub=INT) ':')? lb=INT']'	
;

Predicate returns BoolExpr : Default | Or ;

Default returns BoolExpr:
	{DefaultPredicate}'default'
;
Or returns BoolExpr:
    And (({OrExpr.args+=current})'+' args+=And)*
;
And returns BoolExpr:
	Cmp (({AndExpr.args+=current})'.' args+=Cmp)*
;

Cmp returns BoolExpr:
	Primary (({CmpExpr.args+=current}) (op=('=='|'/=')) args+=Primary)?
;


Primary returns BoolExpr:
	('(' Or ')')
	|
	Constant
	|
//	HexConstant
//	|
	Not
	|
	ConcatExpr 
	|
	PortRef
	|
	ConstRef
	;

Not returns BoolExpr:
	{NotExpr}'/' args+=Primary;
	
Constant returns BoolExpr:
	{Constant}  value=(BIN|HEX)
;

ConstantDef:
	"define" name=ID '=' value=Constant
;
//HexConstant returns BoolExpr:
//	{HexConstant}  value=HEX	
//;
terminal BIN : '"'(('0'|'1')+)'"';

terminal HEX : '0x'((('0'..'9')
	|('A'..'F')|('a'..'f')
)+)'"';
