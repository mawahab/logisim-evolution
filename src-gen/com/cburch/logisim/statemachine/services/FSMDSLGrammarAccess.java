/*
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FSMDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFSMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantDefListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPredicateStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TOP:
		//	FSM | //	ShortFSM |
		//	ConstantDefList | CommandStmt | PredicateStmt;
		@Override public ParserRule getRule() { return rule; }

		//FSM | //	ShortFSM |
		//ConstantDefList | CommandStmt | PredicateStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//FSM
		public RuleCall getFSMParserRuleCall_0() { return cFSMParserRuleCall_0; }

		////	ShortFSM |
		//ConstantDefList
		public RuleCall getConstantDefListParserRuleCall_1() { return cConstantDefListParserRuleCall_1; }

		//CommandStmt
		public RuleCall getCommandStmtParserRuleCall_2() { return cCommandStmtParserRuleCall_2; }

		//PredicateStmt
		public RuleCall getPredicateStmtParserRuleCall_3() { return cPredicateStmtParserRuleCall_3; }
	}

	public class CommandStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCstConstantDefParserRuleCall_1_0_0 = (RuleCall)cCstAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cCstAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCstConstantDefParserRuleCall_1_1_1_0 = (RuleCall)cCstAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInShortInputPortParserRuleCall_4_0_0 = (RuleCall)cInAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInShortInputPortParserRuleCall_4_1_1_0 = (RuleCall)cInAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOutAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOutShortOutputPortParserRuleCall_7_0_0 = (RuleCall)cOutAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cOutAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cOutShortOutputPortParserRuleCall_7_1_1_0 = (RuleCall)cOutAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cCommandsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_9_0_0 = (RuleCall)cCommandsAssignment_9_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cCommandsAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_10_0_0 = (RuleCall)cCommandsAssignment_10_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		
		//CommandStmt:
		//	"[" (cst+=ConstantDef ("," cst+=ConstantDef)*)? "]" "[" (in+=ShortInputPort ("," in+=ShortInputPort)*)? "]" "["
		//	(out+=ShortOutputPort ("," out+=ShortOutputPort)*)? "]" (commands+=Command ";"?) (commands+=Command ";"?)*;
		@Override public ParserRule getRule() { return rule; }

		//"[" (cst+=ConstantDef ("," cst+=ConstantDef)*)? "]" "[" (in+=ShortInputPort ("," in+=ShortInputPort)*)? "]" "["
		//(out+=ShortOutputPort ("," out+=ShortOutputPort)*)? "]" (commands+=Command ";"?) (commands+=Command ";"?)*
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(cst+=ConstantDef ("," cst+=ConstantDef)*)?
		public Group getGroup_1() { return cGroup_1; }

		//cst+=ConstantDef
		public Assignment getCstAssignment_1_0() { return cCstAssignment_1_0; }

		//ConstantDef
		public RuleCall getCstConstantDefParserRuleCall_1_0_0() { return cCstConstantDefParserRuleCall_1_0_0; }

		//("," cst+=ConstantDef)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//cst+=ConstantDef
		public Assignment getCstAssignment_1_1_1() { return cCstAssignment_1_1_1; }

		//ConstantDef
		public RuleCall getCstConstantDefParserRuleCall_1_1_1_0() { return cCstConstantDefParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//(in+=ShortInputPort ("," in+=ShortInputPort)*)?
		public Group getGroup_4() { return cGroup_4; }

		//in+=ShortInputPort
		public Assignment getInAssignment_4_0() { return cInAssignment_4_0; }

		//ShortInputPort
		public RuleCall getInShortInputPortParserRuleCall_4_0_0() { return cInShortInputPortParserRuleCall_4_0_0; }

		//("," in+=ShortInputPort)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//in+=ShortInputPort
		public Assignment getInAssignment_4_1_1() { return cInAssignment_4_1_1; }

		//ShortInputPort
		public RuleCall getInShortInputPortParserRuleCall_4_1_1_0() { return cInShortInputPortParserRuleCall_4_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//(out+=ShortOutputPort ("," out+=ShortOutputPort)*)?
		public Group getGroup_7() { return cGroup_7; }

		//out+=ShortOutputPort
		public Assignment getOutAssignment_7_0() { return cOutAssignment_7_0; }

		//ShortOutputPort
		public RuleCall getOutShortOutputPortParserRuleCall_7_0_0() { return cOutShortOutputPortParserRuleCall_7_0_0; }

		//("," out+=ShortOutputPort)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//out+=ShortOutputPort
		public Assignment getOutAssignment_7_1_1() { return cOutAssignment_7_1_1; }

		//ShortOutputPort
		public RuleCall getOutShortOutputPortParserRuleCall_7_1_1_0() { return cOutShortOutputPortParserRuleCall_7_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }

		//commands+=Command ";"?
		public Group getGroup_9() { return cGroup_9; }

		//commands+=Command
		public Assignment getCommandsAssignment_9_0() { return cCommandsAssignment_9_0; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_9_0_0() { return cCommandsCommandParserRuleCall_9_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }

		//(commands+=Command ";"?)*
		public Group getGroup_10() { return cGroup_10; }

		//commands+=Command
		public Assignment getCommandsAssignment_10_0() { return cCommandsAssignment_10_0; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_10_0_0() { return cCommandsCommandParserRuleCall_10_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }
	}

	public class ConstantDefListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cConstantsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConstantsConstantDefParserRuleCall_0_0_0 = (RuleCall)cConstantsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cConstantsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cConstantsConstantDefParserRuleCall_0_1_1_0 = (RuleCall)cConstantsAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConstantDefList:
		//	((constants+=ConstantDef (";" constants+=ConstantDef)*) ";")?;
		@Override public ParserRule getRule() { return rule; }

		//((constants+=ConstantDef (";" constants+=ConstantDef)*) ";")?
		public Group getGroup() { return cGroup; }

		//constants+=ConstantDef (";" constants+=ConstantDef)*
		public Group getGroup_0() { return cGroup_0; }

		//constants+=ConstantDef
		public Assignment getConstantsAssignment_0_0() { return cConstantsAssignment_0_0; }

		//ConstantDef
		public RuleCall getConstantsConstantDefParserRuleCall_0_0_0() { return cConstantsConstantDefParserRuleCall_0_0_0; }

		//(";" constants+=ConstantDef)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//";"
		public Keyword getSemicolonKeyword_0_1_0() { return cSemicolonKeyword_0_1_0; }

		//constants+=ConstantDef
		public Assignment getConstantsAssignment_0_1_1() { return cConstantsAssignment_0_1_1; }

		//ConstantDef
		public RuleCall getConstantsConstantDefParserRuleCall_0_1_1_0() { return cConstantsConstantDefParserRuleCall_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class PredicateStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCstConstantDefParserRuleCall_1_0_0 = (RuleCall)cCstAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cCstAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCstConstantDefParserRuleCall_1_1_1_0 = (RuleCall)cCstAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInShortInputPortParserRuleCall_4_0_0 = (RuleCall)cInAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInShortInputPortParserRuleCall_4_1_1_0 = (RuleCall)cInAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPredicateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPredicatePredicateParserRuleCall_6_0 = (RuleCall)cPredicateAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PredicateStmt:
		//	"[" (cst+=ConstantDef ("," cst+=ConstantDef)*)? "]" "[" (in+=ShortInputPort ("," in+=ShortInputPort)*)? "]"
		//	predicate=Predicate ";";
		@Override public ParserRule getRule() { return rule; }

		//"[" (cst+=ConstantDef ("," cst+=ConstantDef)*)? "]" "[" (in+=ShortInputPort ("," in+=ShortInputPort)*)? "]"
		//predicate=Predicate ";"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(cst+=ConstantDef ("," cst+=ConstantDef)*)?
		public Group getGroup_1() { return cGroup_1; }

		//cst+=ConstantDef
		public Assignment getCstAssignment_1_0() { return cCstAssignment_1_0; }

		//ConstantDef
		public RuleCall getCstConstantDefParserRuleCall_1_0_0() { return cCstConstantDefParserRuleCall_1_0_0; }

		//("," cst+=ConstantDef)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//cst+=ConstantDef
		public Assignment getCstAssignment_1_1_1() { return cCstAssignment_1_1_1; }

		//ConstantDef
		public RuleCall getCstConstantDefParserRuleCall_1_1_1_0() { return cCstConstantDefParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//(in+=ShortInputPort ("," in+=ShortInputPort)*)?
		public Group getGroup_4() { return cGroup_4; }

		//in+=ShortInputPort
		public Assignment getInAssignment_4_0() { return cInAssignment_4_0; }

		//ShortInputPort
		public RuleCall getInShortInputPortParserRuleCall_4_0_0() { return cInShortInputPortParserRuleCall_4_0_0; }

		//("," in+=ShortInputPort)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//in+=ShortInputPort
		public Assignment getInAssignment_4_1_1() { return cInAssignment_4_1_1; }

		//ShortInputPort
		public RuleCall getInShortInputPortParserRuleCall_4_1_1_0() { return cInShortInputPortParserRuleCall_4_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//predicate=Predicate
		public Assignment getPredicateAssignment_6() { return cPredicateAssignment_6; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_6_0() { return cPredicatePredicateParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFSMAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFsmKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cState_machineKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cConstantsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cConstantsConstantDefParserRuleCall_5_0_0 = (RuleCall)cConstantsAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cInKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cInAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cInInputPortParserRuleCall_6_0_1_0 = (RuleCall)cInAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cOutKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cOutAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cOutOutputPortParserRuleCall_6_1_1_0 = (RuleCall)cOutAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCodeWidthKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cWidthAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_7_2_0 = (RuleCall)cWidthAssignment_7_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cResetKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cStartAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cStartStateCrossReference_8_2_0 = (CrossReference)cStartAssignment_8_2.eContents().get(0);
		private final RuleCall cStartStateIDTerminalRuleCall_8_2_0_1 = (RuleCall)cStartStateCrossReference_8_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cStatesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Alternatives cStatesAlternatives_9_0 = (Alternatives)cStatesAssignment_9.eContents().get(0);
		private final RuleCall cStatesLongStateParserRuleCall_9_0_0 = (RuleCall)cStatesAlternatives_9_0.eContents().get(0);
		private final RuleCall cStatesShortStateParserRuleCall_9_0_1 = (RuleCall)cStatesAlternatives_9_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FSM:
		//	{FSM} ("fsm" | "state_machine") name=ID layout=LayoutInfo "{" (constants+=ConstantDef ";")* ("in" in+=InputPort+ |
		//	"out" out+=OutputPort+)+ ("codeWidth" "=" width=INT ";") ("reset" "=" start=[State] ";") states+=(LongState |
		//	ShortState)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{FSM} ("fsm" | "state_machine") name=ID layout=LayoutInfo "{" (constants+=ConstantDef ";")* ("in" in+=InputPort+ | "out"
		//out+=OutputPort+)+ ("codeWidth" "=" width=INT ";") ("reset" "=" start=[State] ";") states+=(LongState | ShortState)*
		//"}"
		public Group getGroup() { return cGroup; }

		//{FSM}
		public Action getFSMAction_0() { return cFSMAction_0; }

		//"fsm" | "state_machine"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"fsm"
		public Keyword getFsmKeyword_1_0() { return cFsmKeyword_1_0; }

		//"state_machine"
		public Keyword getState_machineKeyword_1_1() { return cState_machineKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(constants+=ConstantDef ";")*
		public Group getGroup_5() { return cGroup_5; }

		//constants+=ConstantDef
		public Assignment getConstantsAssignment_5_0() { return cConstantsAssignment_5_0; }

		//ConstantDef
		public RuleCall getConstantsConstantDefParserRuleCall_5_0_0() { return cConstantsConstantDefParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//("in" in+=InputPort+ | "out" out+=OutputPort+)+
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"in" in+=InputPort+
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"in"
		public Keyword getInKeyword_6_0_0() { return cInKeyword_6_0_0; }

		//in+=InputPort+
		public Assignment getInAssignment_6_0_1() { return cInAssignment_6_0_1; }

		//InputPort
		public RuleCall getInInputPortParserRuleCall_6_0_1_0() { return cInInputPortParserRuleCall_6_0_1_0; }

		//"out" out+=OutputPort+
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"out"
		public Keyword getOutKeyword_6_1_0() { return cOutKeyword_6_1_0; }

		//out+=OutputPort+
		public Assignment getOutAssignment_6_1_1() { return cOutAssignment_6_1_1; }

		//OutputPort
		public RuleCall getOutOutputPortParserRuleCall_6_1_1_0() { return cOutOutputPortParserRuleCall_6_1_1_0; }

		//"codeWidth" "=" width=INT ";"
		public Group getGroup_7() { return cGroup_7; }

		//"codeWidth"
		public Keyword getCodeWidthKeyword_7_0() { return cCodeWidthKeyword_7_0; }

		//"="
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }

		//width=INT
		public Assignment getWidthAssignment_7_2() { return cWidthAssignment_7_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_7_2_0() { return cWidthINTTerminalRuleCall_7_2_0; }

		//";"
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }

		//"reset" "=" start=[State] ";"
		public Group getGroup_8() { return cGroup_8; }

		//"reset"
		public Keyword getResetKeyword_8_0() { return cResetKeyword_8_0; }

		//"="
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }

		//start=[State]
		public Assignment getStartAssignment_8_2() { return cStartAssignment_8_2; }

		//[State]
		public CrossReference getStartStateCrossReference_8_2_0() { return cStartStateCrossReference_8_2_0; }

		//ID
		public RuleCall getStartStateIDTerminalRuleCall_8_2_0_1() { return cStartStateIDTerminalRuleCall_8_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_8_3() { return cSemicolonKeyword_8_3; }

		//states+=(LongState | ShortState)*
		public Assignment getStatesAssignment_9() { return cStatesAssignment_9; }

		//LongState | ShortState
		public Alternatives getStatesAlternatives_9_0() { return cStatesAlternatives_9_0; }

		//LongState
		public RuleCall getStatesLongStateParserRuleCall_9_0_0() { return cStatesLongStateParserRuleCall_9_0_0; }

		//ShortState
		public RuleCall getStatesShortStateParserRuleCall_9_0_1() { return cStatesShortStateParserRuleCall_9_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class FSMElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FSMElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFSMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputPortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommandListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLongStateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDotTransitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cShortStateParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGotoTransitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////ShortFSM returns FSM:
		////{FSM}name=ID '{'
		////	(layout=LayoutInfo)?  
		//////	(constants+=ConstantDef ';')* 
		//////	('in' (in+=InputPort)+ )?
		//////	('out' (out+=OutputPort)+)?
		////	("codeWidth" "=" width=INT ';')?
		////	("reset" "=" start=[State] ';')?
		//////	(states+=ShortState)*
		////'}'	
		////;
		//FSMElement:
		//	FSM | InputPort | OutputPort | CommandList | LongState | DotTransition | ShortState | GotoTransition;
		@Override public ParserRule getRule() { return rule; }

		//FSM | InputPort | OutputPort | CommandList | LongState | DotTransition | ShortState | GotoTransition
		public Alternatives getAlternatives() { return cAlternatives; }

		//FSM
		public RuleCall getFSMParserRuleCall_0() { return cFSMParserRuleCall_0; }

		//InputPort
		public RuleCall getInputPortParserRuleCall_1() { return cInputPortParserRuleCall_1; }

		//OutputPort
		public RuleCall getOutputPortParserRuleCall_2() { return cOutputPortParserRuleCall_2; }

		//CommandList
		public RuleCall getCommandListParserRuleCall_3() { return cCommandListParserRuleCall_3; }

		//LongState
		public RuleCall getLongStateParserRuleCall_4() { return cLongStateParserRuleCall_4; }

		//DotTransition
		public RuleCall getDotTransitionParserRuleCall_5() { return cDotTransitionParserRuleCall_5; }

		//ShortState
		public RuleCall getShortStateParserRuleCall_6() { return cShortStateParserRuleCall_6; }

		//GotoTransition
		public RuleCall getGotoTransitionParserRuleCall_7() { return cGotoTransitionParserRuleCall_7; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Port :
		////	name=ID width=INT (layout=LayoutInfo) ;
		////;
		//Port:
		//	InputPort | OutputPort;
		@Override public ParserRule getRule() { return rule; }

		//InputPort | OutputPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputPort
		public RuleCall getInputPortParserRuleCall_0() { return cInputPortParserRuleCall_0; }

		//OutputPort
		public RuleCall getOutputPortParserRuleCall_1() { return cOutputPortParserRuleCall_1; }
	}

	public class ShortInputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortInputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWidthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_2_1_0 = (RuleCall)cWidthAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ShortInputPort returns Port:
		//	{InputPort} name=ID ("[" width=INT "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{InputPort} name=ID ("[" width=INT "]")?
		public Group getGroup() { return cGroup; }

		//{InputPort}
		public Action getInputPortAction_0() { return cInputPortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" width=INT "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//width=INT
		public Assignment getWidthAssignment_2_1() { return cWidthAssignment_2_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_1_0() { return cWidthINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class ShortOutputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortOutputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWidthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_2_1_0 = (RuleCall)cWidthAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ShortOutputPort returns Port:
		//	{OutputPort} name=ID ("[" width=INT "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{OutputPort} name=ID ("[" width=INT "]")?
		public Group getGroup() { return cGroup; }

		//{OutputPort}
		public Action getOutputPortAction_0() { return cOutputPortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" width=INT "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//width=INT
		public Assignment getWidthAssignment_2_1() { return cWidthAssignment_2_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_1_0() { return cWidthINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class InputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWidthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_2_1_0 = (RuleCall)cWidthAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InputPort returns Port:
		//	{InputPort} name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//{InputPort} name=ID ("[" width=INT "]")? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//{InputPort}
		public Action getInputPortAction_0() { return cInputPortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" width=INT "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//width=INT
		public Assignment getWidthAssignment_2_1() { return cWidthAssignment_2_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_1_0() { return cWidthINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class OutputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWidthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_2_1_0 = (RuleCall)cWidthAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutputPort returns Port:
		//	{OutputPort} name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//{OutputPort} name=ID ("[" width=INT "]")? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//{OutputPort}
		public Action getOutputPortAction_0() { return cOutputPortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" width=INT "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//width=INT
		public Assignment getWidthAssignment_2_1() { return cWidthAssignment_2_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_1_0() { return cWidthINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CommandListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommandsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLayoutAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_1_1_0 = (RuleCall)cLayoutAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCommandsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_1_3_0 = (RuleCall)cCommandsAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//CommandList:
		//	{CommandList} ("commands" layout=LayoutInfo "{" commands+=Command* "}");
		@Override public ParserRule getRule() { return rule; }

		//{CommandList} ("commands" layout=LayoutInfo "{" commands+=Command* "}")
		public Group getGroup() { return cGroup; }

		//{CommandList}
		public Action getCommandListAction_0() { return cCommandListAction_0; }

		//"commands" layout=LayoutInfo "{" commands+=Command* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"commands"
		public Keyword getCommandsKeyword_1_0() { return cCommandsKeyword_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_1_1() { return cLayoutAssignment_1_1; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_1_1_0() { return cLayoutLayoutInfoParserRuleCall_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//commands+=Command*
		public Assignment getCommandsAssignment_1_3() { return cCommandsAssignment_1_3; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_3_0() { return cCommandsCommandParserRuleCall_1_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}

	public class LayoutInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LayoutInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayoutInfoAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cXAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_1_2_0 = (RuleCall)cXAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cYAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_1_4_0 = (RuleCall)cYAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cWidthAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_5_1_0 = (RuleCall)cWidthAssignment_1_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_5_2 = (Keyword)cGroup_1_5.eContents().get(2);
		private final Assignment cHeightAssignment_1_5_3 = (Assignment)cGroup_1_5.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_1_5_3_0 = (RuleCall)cHeightAssignment_1_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//LayoutInfo:
		//	{LayoutInfo} ("@" "[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{LayoutInfo} ("@" "[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?
		public Group getGroup() { return cGroup; }

		//{LayoutInfo}
		public Action getLayoutInfoAction_0() { return cLayoutInfoAction_0; }

		//("@" "[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//x=INT
		public Assignment getXAssignment_1_2() { return cXAssignment_1_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_2_0() { return cXINTTerminalRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//y=INT
		public Assignment getYAssignment_1_4() { return cYAssignment_1_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_1_4_0() { return cYINTTerminalRuleCall_1_4_0; }

		//("," width=INT "," height=INT)?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//","
		public Keyword getCommaKeyword_1_5_0() { return cCommaKeyword_1_5_0; }

		//width=INT
		public Assignment getWidthAssignment_1_5_1() { return cWidthAssignment_1_5_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_5_1_0() { return cWidthINTTerminalRuleCall_1_5_1_0; }

		//","
		public Keyword getCommaKeyword_1_5_2() { return cCommaKeyword_1_5_2; }

		//height=INT
		public Assignment getHeightAssignment_1_5_3() { return cHeightAssignment_1_5_3; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_1_5_3_0() { return cHeightINTTerminalRuleCall_1_5_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_6() { return cRightSquareBracketKeyword_1_6; }
	}

	public class LongStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCodeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCodeBINTerminalRuleCall_3_1_0 = (RuleCall)cCodeAssignment_3_1.eContents().get(0);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCommandListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandListCommandListParserRuleCall_6_0 = (RuleCall)cCommandListAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTransitionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTransitionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cTransitionDotTransitionParserRuleCall_7_2_0 = (RuleCall)cTransitionAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LongState returns State:
		//	{State} "state" name=ID ("=" code=BIN)? layout=LayoutInfo "{" commandList=CommandList? ("transitions" "{"
		//	transition+=DotTransition* "}")? "}";
		@Override public ParserRule getRule() { return rule; }

		//{State} "state" name=ID ("=" code=BIN)? layout=LayoutInfo "{" commandList=CommandList? ("transitions" "{"
		//transition+=DotTransition* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("=" code=BIN)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//code=BIN
		public Assignment getCodeAssignment_3_1() { return cCodeAssignment_3_1; }

		//BIN
		public RuleCall getCodeBINTerminalRuleCall_3_1_0() { return cCodeBINTerminalRuleCall_3_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_4_0() { return cLayoutLayoutInfoParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//commandList=CommandList?
		public Assignment getCommandListAssignment_6() { return cCommandListAssignment_6; }

		//CommandList
		public RuleCall getCommandListCommandListParserRuleCall_6_0() { return cCommandListCommandListParserRuleCall_6_0; }

		//("transitions" "{" transition+=DotTransition* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"transitions"
		public Keyword getTransitionsKeyword_7_0() { return cTransitionsKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//transition+=DotTransition*
		public Assignment getTransitionAssignment_7_2() { return cTransitionAssignment_7_2; }

		//DotTransition
		public RuleCall getTransitionDotTransitionParserRuleCall_7_2_0() { return cTransitionDotTransitionParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ShortStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCodeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCodeBINTerminalRuleCall_2_1_0 = (RuleCall)cCodeAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Assignment cCommandListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandListShortCommandListParserRuleCall_5_0 = (RuleCall)cCommandListAssignment_5.eContents().get(0);
		private final Assignment cTransitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionGotoTransitionParserRuleCall_6_0 = (RuleCall)cTransitionAssignment_6.eContents().get(0);
		
		//ShortState returns State:
		//	"state" name=ID ("[" code=BIN "]")? ":" layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*;
		@Override public ParserRule getRule() { return rule; }

		//"state" name=ID ("[" code=BIN "]")? ":" layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" code=BIN "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//code=BIN
		public Assignment getCodeAssignment_2_1() { return cCodeAssignment_2_1; }

		//BIN
		public RuleCall getCodeBINTerminalRuleCall_2_1_0() { return cCodeBINTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_4_0() { return cLayoutLayoutInfoParserRuleCall_4_0; }

		//commandList=ShortCommandList
		public Assignment getCommandListAssignment_5() { return cCommandListAssignment_5; }

		//ShortCommandList
		public RuleCall getCommandListShortCommandListParserRuleCall_5_0() { return cCommandListShortCommandListParserRuleCall_5_0; }

		//transition+=GotoTransition*
		public Assignment getTransitionAssignment_6() { return cTransitionAssignment_6; }

		//GotoTransition
		public RuleCall getTransitionGotoTransitionParserRuleCall_6_0() { return cTransitionGotoTransitionParserRuleCall_6_0; }
	}

	public class ShortCommandListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortCommandList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		private final Assignment cLayoutAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_1_2_0 = (RuleCall)cLayoutAssignment_1_2.eContents().get(0);
		
		//ShortCommandList returns CommandList:
		//	{CommandList} ("set" commands+=Command+ layout=LayoutInfo)?;
		@Override public ParserRule getRule() { return rule; }

		//{CommandList} ("set" commands+=Command+ layout=LayoutInfo)?
		public Group getGroup() { return cGroup; }

		//{CommandList}
		public Action getCommandListAction_0() { return cCommandListAction_0; }

		//("set" commands+=Command+ layout=LayoutInfo)?
		public Group getGroup_1() { return cGroup_1; }

		//"set"
		public Keyword getSetKeyword_1_0() { return cSetKeyword_1_0; }

		//commands+=Command+
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_1_0() { return cCommandsCommandParserRuleCall_1_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_1_2() { return cLayoutAssignment_1_2; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_1_2_0() { return cLayoutLayoutInfoParserRuleCall_1_2_0; }
	}

	public class GotoTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GotoTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDstStateCrossReference_1_0 = (CrossReference)cDstAssignment_1.eContents().get(0);
		private final RuleCall cDstStateIDTerminalRuleCall_1_0_1 = (RuleCall)cDstStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_2_1_0 = (RuleCall)cPredicateAssignment_2_1.eContents().get(0);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GotoTransition returns Transition:
		//	"goto" dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//"goto" dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//dst=[State]
		public Assignment getDstAssignment_1() { return cDstAssignment_1; }

		//[State]
		public CrossReference getDstStateCrossReference_1_0() { return cDstStateCrossReference_1_0; }

		//ID
		public RuleCall getDstStateIDTerminalRuleCall_1_0_1() { return cDstStateIDTerminalRuleCall_1_0_1; }

		//("when" predicate=Predicate)?
		public Group getGroup_2() { return cGroup_2; }

		//"when"
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }

		//predicate=Predicate
		public Assignment getPredicateAssignment_2_1() { return cPredicateAssignment_2_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_2_1_0() { return cPredicatePredicateParserRuleCall_2_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DotTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSrcAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cSrcStateCrossReference_0_0_0 = (CrossReference)cSrcAssignment_0_0.eContents().get(0);
		private final RuleCall cSrcStateIDTerminalRuleCall_0_0_0_1 = (RuleCall)cSrcStateCrossReference_0_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDstStateCrossReference_1_0 = (CrossReference)cDstAssignment_1.eContents().get(0);
		private final RuleCall cDstStateIDTerminalRuleCall_1_0_1 = (RuleCall)cDstStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_2_1_0 = (RuleCall)cPredicateAssignment_2_1.eContents().get(0);
		private final Assignment cLayoutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayoutLayoutInfoParserRuleCall_3_0 = (RuleCall)cLayoutAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DotTransition returns Transition:
		//	(src=[State]? "->") dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";";
		@Override public ParserRule getRule() { return rule; }

		//(src=[State]? "->") dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";"
		public Group getGroup() { return cGroup; }

		//src=[State]? "->"
		public Group getGroup_0() { return cGroup_0; }

		//src=[State]?
		public Assignment getSrcAssignment_0_0() { return cSrcAssignment_0_0; }

		//[State]
		public CrossReference getSrcStateCrossReference_0_0_0() { return cSrcStateCrossReference_0_0_0; }

		//ID
		public RuleCall getSrcStateIDTerminalRuleCall_0_0_0_1() { return cSrcStateIDTerminalRuleCall_0_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }

		//dst=[State]
		public Assignment getDstAssignment_1() { return cDstAssignment_1; }

		//[State]
		public CrossReference getDstStateCrossReference_1_0() { return cDstStateCrossReference_1_0; }

		//ID
		public RuleCall getDstStateIDTerminalRuleCall_1_0_1() { return cDstStateIDTerminalRuleCall_1_0_1; }

		//("when" predicate=Predicate)?
		public Group getGroup_2() { return cGroup_2; }

		//"when"
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }

		//predicate=Predicate
		public Assignment getPredicateAssignment_2_1() { return cPredicateAssignment_2_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_2_1_0() { return cPredicatePredicateParserRuleCall_2_1_0; }

		//layout=LayoutInfo
		public Assignment getLayoutAssignment_3() { return cLayoutAssignment_3; }

		//LayoutInfo
		public RuleCall getLayoutLayoutInfoParserRuleCall_3_0() { return cLayoutLayoutInfoParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameOutputPortCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameOutputPortIDTerminalRuleCall_0_0_1 = (RuleCall)cNameOutputPortCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueOrParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Command:
		//	name=[OutputPort] "=" value=Or ";";
		@Override public ParserRule getRule() { return rule; }

		//name=[OutputPort] "=" value=Or ";"
		public Group getGroup() { return cGroup; }

		//name=[OutputPort]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[OutputPort]
		public CrossReference getNameOutputPortCrossReference_0_0() { return cNameOutputPortCrossReference_0_0; }

		//ID
		public RuleCall getNameOutputPortIDTerminalRuleCall_0_0_1() { return cNameOutputPortIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Or
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Or
		public RuleCall getValueOrParserRuleCall_2_0() { return cValueOrParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ConcatExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcatExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsOrParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsOrParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConcatExpr returns BoolExpr:
		//	{ConcatExpr} "{" args+=Or ("," args+=Or)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{ConcatExpr} "{" args+=Or ("," args+=Or)* "}"
		public Group getGroup() { return cGroup; }

		//{ConcatExpr}
		public Action getConcatExprAction_0() { return cConcatExprAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//args+=Or
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Or
		public RuleCall getArgsOrParserRuleCall_2_0() { return cArgsOrParserRuleCall_2_0; }

		//("," args+=Or)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=Or
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//Or
		public RuleCall getArgsOrParserRuleCall_3_1_0() { return cArgsOrParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PortRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortPortCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_1_0_1 = (RuleCall)cPortPortCrossReference_1_0.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		////Port : 
		////	name=ID ('[' width=INT']')? (layout=LayoutInfo) ';';
		//PortRef returns BoolExpr:
		//	{PortRef} port=[Port] range=Range?;
		@Override public ParserRule getRule() { return rule; }

		//{PortRef} port=[Port] range=Range?
		public Group getGroup() { return cGroup; }

		//{PortRef}
		public Action getPortRefAction_0() { return cPortRefAction_0; }

		//port=[Port]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//[Port]
		public CrossReference getPortPortCrossReference_1_0() { return cPortPortCrossReference_1_0; }

		//ID
		public RuleCall getPortPortIDTerminalRuleCall_1_0_1() { return cPortPortIDTerminalRuleCall_1_0_1; }

		//range=Range?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0() { return cRangeRangeParserRuleCall_2_0; }
	}

	public class ConstRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstConstantDefCrossReference_2_0 = (CrossReference)cConstAssignment_2.eContents().get(0);
		private final RuleCall cConstConstantDefIDTerminalRuleCall_2_0_1 = (RuleCall)cConstConstantDefCrossReference_2_0.eContents().get(1);
		
		//ConstRef returns BoolExpr:
		//	{ConstRef} "#" const=[ConstantDef];
		@Override public ParserRule getRule() { return rule; }

		//{ConstRef} "#" const=[ConstantDef]
		public Group getGroup() { return cGroup; }

		//{ConstRef}
		public Action getConstRefAction_0() { return cConstRefAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//const=[ConstantDef]
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }

		//[ConstantDef]
		public CrossReference getConstConstantDefCrossReference_2_0() { return cConstConstantDefCrossReference_2_0; }

		//ID
		public RuleCall getConstConstantDefIDTerminalRuleCall_2_0_1() { return cConstConstantDefIDTerminalRuleCall_2_0_1; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cUbAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUbINTTerminalRuleCall_1_0_0 = (RuleCall)cUbAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLbINTTerminalRuleCall_2_0 = (RuleCall)cLbAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Range:
		//	"[" (ub=INT ":")? lb=INT "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" (ub=INT ":")? lb=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(ub=INT ":")?
		public Group getGroup_1() { return cGroup_1; }

		//ub=INT
		public Assignment getUbAssignment_1_0() { return cUbAssignment_1_0; }

		//INT
		public RuleCall getUbINTTerminalRuleCall_1_0_0() { return cUbINTTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//lb=INT
		public Assignment getLbAssignment_2() { return cLbAssignment_2; }

		//INT
		public RuleCall getLbINTTerminalRuleCall_2_0() { return cLbINTTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Predicate returns BoolExpr:
		//	Default | Or;
		@Override public ParserRule getRule() { return rule; }

		//Default | Or
		public Alternatives getAlternatives() { return cAlternatives; }

		//Default
		public RuleCall getDefaultParserRuleCall_0() { return cDefaultParserRuleCall_0; }

		//Or
		public RuleCall getOrParserRuleCall_1() { return cOrParserRuleCall_1; }
	}

	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Default returns BoolExpr:
		//	{DefaultPredicate} "default";
		@Override public ParserRule getRule() { return rule; }

		//{DefaultPredicate} "default"
		public Group getGroup() { return cGroup; }

		//{DefaultPredicate}
		public Action getDefaultPredicateAction_0() { return cDefaultPredicateAction_0; }

		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExprArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsAndParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Or returns BoolExpr:
		//	And ({OrExpr.args+=current} "+" args+=And)*;
		@Override public ParserRule getRule() { return rule; }

		//And ({OrExpr.args+=current} "+" args+=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({OrExpr.args+=current} "+" args+=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpr.args+=current}
		public Action getOrExprArgsAction_1_0() { return cOrExprArgsAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//args+=And
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//And
		public RuleCall getArgsAndParserRuleCall_1_2_0() { return cArgsAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExprArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsCmpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//And returns BoolExpr:
		//	Cmp ({AndExpr.args+=current} "." args+=Cmp)*;
		@Override public ParserRule getRule() { return rule; }

		//Cmp ({AndExpr.args+=current} "." args+=Cmp)*
		public Group getGroup() { return cGroup; }

		//Cmp
		public RuleCall getCmpParserRuleCall_0() { return cCmpParserRuleCall_0; }

		//({AndExpr.args+=current} "." args+=Cmp)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpr.args+=current}
		public Action getAndExprArgsAction_1_0() { return cAndExprArgsAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//args+=Cmp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//Cmp
		public RuleCall getArgsCmpParserRuleCall_1_2_0() { return cArgsCmpParserRuleCall_1_2_0; }
	}

	public class CmpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cmp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCmpExprArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsPrimaryParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Cmp returns BoolExpr:
		//	Primary ({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?
		public Group getGroup_1() { return cGroup_1; }

		//{CmpExpr.args+=current}
		public Action getCmpExprArgsAction_1_0() { return cCmpExprArgsAction_1_0; }

		//op=("==" | "/=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "/="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"/="
		public Keyword getOpSolidusEqualsSignKeyword_1_1_0_1() { return cOpSolidusEqualsSignKeyword_1_1_0_1; }

		//args+=Primary
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//Primary
		public RuleCall getArgsPrimaryParserRuleCall_1_2_0() { return cArgsPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConcatExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPortRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstRefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Primary returns BoolExpr:
		//	"(" Or ")" | Constant | //	HexConstant
		//	//	|
		//	Not | ConcatExpr | PortRef | ConstRef;
		@Override public ParserRule getRule() { return rule; }

		//"(" Or ")" | Constant | //	HexConstant
		////	|
		//Not | ConcatExpr | PortRef | ConstRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Or ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Or
		public RuleCall getOrParserRuleCall_0_1() { return cOrParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		////	HexConstant
		////	|
		//Not
		public RuleCall getNotParserRuleCall_2() { return cNotParserRuleCall_2; }

		//ConcatExpr
		public RuleCall getConcatExprParserRuleCall_3() { return cConcatExprParserRuleCall_3; }

		//PortRef
		public RuleCall getPortRefParserRuleCall_4() { return cPortRefParserRuleCall_4; }

		//ConstRef
		public RuleCall getConstRefParserRuleCall_5() { return cConstRefParserRuleCall_5; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsPrimaryParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		
		//Not returns BoolExpr:
		//	{NotExpr} "/" args+=Primary;
		@Override public ParserRule getRule() { return rule; }

		//{NotExpr} "/" args+=Primary
		public Group getGroup() { return cGroup; }

		//{NotExpr}
		public Action getNotExprAction_0() { return cNotExprAction_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//args+=Primary
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Primary
		public RuleCall getArgsPrimaryParserRuleCall_2_0() { return cArgsPrimaryParserRuleCall_2_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueBINTerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueHEXTerminalRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		
		//Constant returns BoolExpr:
		//	{Constant} value=(BIN | HEX);
		@Override public ParserRule getRule() { return rule; }

		//{Constant} value=(BIN | HEX)
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//value=(BIN | HEX)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BIN | HEX
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//BIN
		public RuleCall getValueBINTerminalRuleCall_1_0_0() { return cValueBINTerminalRuleCall_1_0_0; }

		//HEX
		public RuleCall getValueHEXTerminalRuleCall_1_0_1() { return cValueHEXTerminalRuleCall_1_0_1; }
	}

	public class ConstantDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueConstantParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ConstantDef:
		//	"define" name=ID "=" value=Constant;
		@Override public ParserRule getRule() { return rule; }

		//"define" name=ID "=" value=Constant
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Constant
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Constant
		public RuleCall getValueConstantParserRuleCall_3_0() { return cValueConstantParserRuleCall_3_0; }
	}
	
	
	private final TOPElements pTOP;
	private final CommandStmtElements pCommandStmt;
	private final ConstantDefListElements pConstantDefList;
	private final PredicateStmtElements pPredicateStmt;
	private final FSMElements pFSM;
	private final FSMElementElements pFSMElement;
	private final PortElements pPort;
	private final ShortInputPortElements pShortInputPort;
	private final ShortOutputPortElements pShortOutputPort;
	private final InputPortElements pInputPort;
	private final OutputPortElements pOutputPort;
	private final CommandListElements pCommandList;
	private final LayoutInfoElements pLayoutInfo;
	private final LongStateElements pLongState;
	private final ShortStateElements pShortState;
	private final ShortCommandListElements pShortCommandList;
	private final GotoTransitionElements pGotoTransition;
	private final DotTransitionElements pDotTransition;
	private final CommandElements pCommand;
	private final ConcatExprElements pConcatExpr;
	private final PortRefElements pPortRef;
	private final ConstRefElements pConstRef;
	private final RangeElements pRange;
	private final PredicateElements pPredicate;
	private final DefaultElements pDefault;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final CmpElements pCmp;
	private final PrimaryElements pPrimary;
	private final NotElements pNot;
	private final ConstantElements pConstant;
	private final ConstantDefElements pConstantDef;
	private final TerminalRule tBIN;
	private final TerminalRule tHEX;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FSMDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTOP = new TOPElements();
		this.pCommandStmt = new CommandStmtElements();
		this.pConstantDefList = new ConstantDefListElements();
		this.pPredicateStmt = new PredicateStmtElements();
		this.pFSM = new FSMElements();
		this.pFSMElement = new FSMElementElements();
		this.pPort = new PortElements();
		this.pShortInputPort = new ShortInputPortElements();
		this.pShortOutputPort = new ShortOutputPortElements();
		this.pInputPort = new InputPortElements();
		this.pOutputPort = new OutputPortElements();
		this.pCommandList = new CommandListElements();
		this.pLayoutInfo = new LayoutInfoElements();
		this.pLongState = new LongStateElements();
		this.pShortState = new ShortStateElements();
		this.pShortCommandList = new ShortCommandListElements();
		this.pGotoTransition = new GotoTransitionElements();
		this.pDotTransition = new DotTransitionElements();
		this.pCommand = new CommandElements();
		this.pConcatExpr = new ConcatExprElements();
		this.pPortRef = new PortRefElements();
		this.pConstRef = new ConstRefElements();
		this.pRange = new RangeElements();
		this.pPredicate = new PredicateElements();
		this.pDefault = new DefaultElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pCmp = new CmpElements();
		this.pPrimary = new PrimaryElements();
		this.pNot = new NotElements();
		this.pConstant = new ConstantElements();
		this.pConstantDef = new ConstantDefElements();
		this.tBIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIN");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.cburch.logisim.statemachine.FSMDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TOP:
	//	FSM | //	ShortFSM |
	//	ConstantDefList | CommandStmt | PredicateStmt;
	public TOPElements getTOPAccess() {
		return pTOP;
	}
	
	public ParserRule getTOPRule() {
		return getTOPAccess().getRule();
	}

	//CommandStmt:
	//	"[" (cst+=ConstantDef ("," cst+=ConstantDef)*)? "]" "[" (in+=ShortInputPort ("," in+=ShortInputPort)*)? "]" "["
	//	(out+=ShortOutputPort ("," out+=ShortOutputPort)*)? "]" (commands+=Command ";"?) (commands+=Command ";"?)*;
	public CommandStmtElements getCommandStmtAccess() {
		return pCommandStmt;
	}
	
	public ParserRule getCommandStmtRule() {
		return getCommandStmtAccess().getRule();
	}

	//ConstantDefList:
	//	((constants+=ConstantDef (";" constants+=ConstantDef)*) ";")?;
	public ConstantDefListElements getConstantDefListAccess() {
		return pConstantDefList;
	}
	
	public ParserRule getConstantDefListRule() {
		return getConstantDefListAccess().getRule();
	}

	//PredicateStmt:
	//	"[" (cst+=ConstantDef ("," cst+=ConstantDef)*)? "]" "[" (in+=ShortInputPort ("," in+=ShortInputPort)*)? "]"
	//	predicate=Predicate ";";
	public PredicateStmtElements getPredicateStmtAccess() {
		return pPredicateStmt;
	}
	
	public ParserRule getPredicateStmtRule() {
		return getPredicateStmtAccess().getRule();
	}

	//FSM:
	//	{FSM} ("fsm" | "state_machine") name=ID layout=LayoutInfo "{" (constants+=ConstantDef ";")* ("in" in+=InputPort+ |
	//	"out" out+=OutputPort+)+ ("codeWidth" "=" width=INT ";") ("reset" "=" start=[State] ";") states+=(LongState |
	//	ShortState)* "}";
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}

	////ShortFSM returns FSM:
	////{FSM}name=ID '{'
	////	(layout=LayoutInfo)?  
	//////	(constants+=ConstantDef ';')* 
	//////	('in' (in+=InputPort)+ )?
	//////	('out' (out+=OutputPort)+)?
	////	("codeWidth" "=" width=INT ';')?
	////	("reset" "=" start=[State] ';')?
	//////	(states+=ShortState)*
	////'}'	
	////;
	//FSMElement:
	//	FSM | InputPort | OutputPort | CommandList | LongState | DotTransition | ShortState | GotoTransition;
	public FSMElementElements getFSMElementAccess() {
		return pFSMElement;
	}
	
	public ParserRule getFSMElementRule() {
		return getFSMElementAccess().getRule();
	}

	////Port :
	////	name=ID width=INT (layout=LayoutInfo) ;
	////;
	//Port:
	//	InputPort | OutputPort;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//ShortInputPort returns Port:
	//	{InputPort} name=ID ("[" width=INT "]")?;
	public ShortInputPortElements getShortInputPortAccess() {
		return pShortInputPort;
	}
	
	public ParserRule getShortInputPortRule() {
		return getShortInputPortAccess().getRule();
	}

	//ShortOutputPort returns Port:
	//	{OutputPort} name=ID ("[" width=INT "]")?;
	public ShortOutputPortElements getShortOutputPortAccess() {
		return pShortOutputPort;
	}
	
	public ParserRule getShortOutputPortRule() {
		return getShortOutputPortAccess().getRule();
	}

	//InputPort returns Port:
	//	{InputPort} name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
	public InputPortElements getInputPortAccess() {
		return pInputPort;
	}
	
	public ParserRule getInputPortRule() {
		return getInputPortAccess().getRule();
	}

	//OutputPort returns Port:
	//	{OutputPort} name=ID ("[" width=INT "]")? layout=LayoutInfo ";";
	public OutputPortElements getOutputPortAccess() {
		return pOutputPort;
	}
	
	public ParserRule getOutputPortRule() {
		return getOutputPortAccess().getRule();
	}

	//CommandList:
	//	{CommandList} ("commands" layout=LayoutInfo "{" commands+=Command* "}");
	public CommandListElements getCommandListAccess() {
		return pCommandList;
	}
	
	public ParserRule getCommandListRule() {
		return getCommandListAccess().getRule();
	}

	//LayoutInfo:
	//	{LayoutInfo} ("@" "[" x=INT "," y=INT ("," width=INT "," height=INT)? "]")?;
	public LayoutInfoElements getLayoutInfoAccess() {
		return pLayoutInfo;
	}
	
	public ParserRule getLayoutInfoRule() {
		return getLayoutInfoAccess().getRule();
	}

	//LongState returns State:
	//	{State} "state" name=ID ("=" code=BIN)? layout=LayoutInfo "{" commandList=CommandList? ("transitions" "{"
	//	transition+=DotTransition* "}")? "}";
	public LongStateElements getLongStateAccess() {
		return pLongState;
	}
	
	public ParserRule getLongStateRule() {
		return getLongStateAccess().getRule();
	}

	//ShortState returns State:
	//	"state" name=ID ("[" code=BIN "]")? ":" layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*;
	public ShortStateElements getShortStateAccess() {
		return pShortState;
	}
	
	public ParserRule getShortStateRule() {
		return getShortStateAccess().getRule();
	}

	//ShortCommandList returns CommandList:
	//	{CommandList} ("set" commands+=Command+ layout=LayoutInfo)?;
	public ShortCommandListElements getShortCommandListAccess() {
		return pShortCommandList;
	}
	
	public ParserRule getShortCommandListRule() {
		return getShortCommandListAccess().getRule();
	}

	//GotoTransition returns Transition:
	//	"goto" dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";";
	public GotoTransitionElements getGotoTransitionAccess() {
		return pGotoTransition;
	}
	
	public ParserRule getGotoTransitionRule() {
		return getGotoTransitionAccess().getRule();
	}

	//DotTransition returns Transition:
	//	(src=[State]? "->") dst=[State] ("when" predicate=Predicate)? layout=LayoutInfo ";";
	public DotTransitionElements getDotTransitionAccess() {
		return pDotTransition;
	}
	
	public ParserRule getDotTransitionRule() {
		return getDotTransitionAccess().getRule();
	}

	//Command:
	//	name=[OutputPort] "=" value=Or ";";
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//ConcatExpr returns BoolExpr:
	//	{ConcatExpr} "{" args+=Or ("," args+=Or)* "}";
	public ConcatExprElements getConcatExprAccess() {
		return pConcatExpr;
	}
	
	public ParserRule getConcatExprRule() {
		return getConcatExprAccess().getRule();
	}

	////Port : 
	////	name=ID ('[' width=INT']')? (layout=LayoutInfo) ';';
	//PortRef returns BoolExpr:
	//	{PortRef} port=[Port] range=Range?;
	public PortRefElements getPortRefAccess() {
		return pPortRef;
	}
	
	public ParserRule getPortRefRule() {
		return getPortRefAccess().getRule();
	}

	//ConstRef returns BoolExpr:
	//	{ConstRef} "#" const=[ConstantDef];
	public ConstRefElements getConstRefAccess() {
		return pConstRef;
	}
	
	public ParserRule getConstRefRule() {
		return getConstRefAccess().getRule();
	}

	//Range:
	//	"[" (ub=INT ":")? lb=INT "]";
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//Predicate returns BoolExpr:
	//	Default | Or;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//Default returns BoolExpr:
	//	{DefaultPredicate} "default";
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}

	//Or returns BoolExpr:
	//	And ({OrExpr.args+=current} "+" args+=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns BoolExpr:
	//	Cmp ({AndExpr.args+=current} "." args+=Cmp)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Cmp returns BoolExpr:
	//	Primary ({CmpExpr.args+=current} op=("==" | "/=") args+=Primary)?;
	public CmpElements getCmpAccess() {
		return pCmp;
	}
	
	public ParserRule getCmpRule() {
		return getCmpAccess().getRule();
	}

	//Primary returns BoolExpr:
	//	"(" Or ")" | Constant | //	HexConstant
	//	//	|
	//	Not | ConcatExpr | PortRef | ConstRef;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Not returns BoolExpr:
	//	{NotExpr} "/" args+=Primary;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Constant returns BoolExpr:
	//	{Constant} value=(BIN | HEX);
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ConstantDef:
	//	"define" name=ID "=" value=Constant;
	public ConstantDefElements getConstantDefAccess() {
		return pConstantDef;
	}
	
	public ParserRule getConstantDefRule() {
		return getConstantDefAccess().getRule();
	}

	////HexConstant returns BoolExpr:
	////	{HexConstant}  value=HEX	
	////;
	//terminal BIN:
	//	"\"" ("0" | "1")+ "\"";
	public TerminalRule getBINRule() {
		return tBIN;
	} 

	//terminal HEX:
	//	"0x" ("0".."9" | "A".."F" | "a".."f")+ "\"";
	public TerminalRule getHEXRule() {
		return tHEX;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
