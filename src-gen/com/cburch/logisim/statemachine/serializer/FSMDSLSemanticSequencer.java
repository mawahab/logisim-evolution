/*
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.serializer;

import com.cburch.logisim.statemachine.fSMDSL.AndExpr;
import com.cburch.logisim.statemachine.fSMDSL.CmpExpr;
import com.cburch.logisim.statemachine.fSMDSL.Command;
import com.cburch.logisim.statemachine.fSMDSL.CommandList;
import com.cburch.logisim.statemachine.fSMDSL.CommandStmt;
import com.cburch.logisim.statemachine.fSMDSL.ConcatExpr;
import com.cburch.logisim.statemachine.fSMDSL.ConstRef;
import com.cburch.logisim.statemachine.fSMDSL.Constant;
import com.cburch.logisim.statemachine.fSMDSL.ConstantDef;
import com.cburch.logisim.statemachine.fSMDSL.ConstantDefList;
import com.cburch.logisim.statemachine.fSMDSL.DefaultPredicate;
import com.cburch.logisim.statemachine.fSMDSL.FSM;
import com.cburch.logisim.statemachine.fSMDSL.FSMDSLPackage;
import com.cburch.logisim.statemachine.fSMDSL.InputPort;
import com.cburch.logisim.statemachine.fSMDSL.LayoutInfo;
import com.cburch.logisim.statemachine.fSMDSL.NotExpr;
import com.cburch.logisim.statemachine.fSMDSL.OrExpr;
import com.cburch.logisim.statemachine.fSMDSL.OutputPort;
import com.cburch.logisim.statemachine.fSMDSL.PortRef;
import com.cburch.logisim.statemachine.fSMDSL.PredicateStmt;
import com.cburch.logisim.statemachine.fSMDSL.Range;
import com.cburch.logisim.statemachine.fSMDSL.State;
import com.cburch.logisim.statemachine.fSMDSL.Transition;
import com.cburch.logisim.statemachine.services.FSMDSLGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FSMDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FSMDSLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FSMDSLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FSMDSLPackage.AND_EXPR:
				sequence_And(context, (AndExpr) semanticObject); 
				return; 
			case FSMDSLPackage.CMP_EXPR:
				sequence_Cmp(context, (CmpExpr) semanticObject); 
				return; 
			case FSMDSLPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case FSMDSLPackage.COMMAND_LIST:
				if(context == grammarAccess.getCommandListRule() ||
				   context == grammarAccess.getFSMElementRule()) {
					sequence_CommandList(context, (CommandList) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getShortCommandListRule()) {
					sequence_ShortCommandList(context, (CommandList) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.COMMAND_STMT:
				sequence_CommandStmt(context, (CommandStmt) semanticObject); 
				return; 
			case FSMDSLPackage.CONCAT_EXPR:
				sequence_ConcatExpr(context, (ConcatExpr) semanticObject); 
				return; 
			case FSMDSLPackage.CONST_REF:
				sequence_ConstRef(context, (ConstRef) semanticObject); 
				return; 
			case FSMDSLPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case FSMDSLPackage.CONSTANT_DEF:
				sequence_ConstantDef(context, (ConstantDef) semanticObject); 
				return; 
			case FSMDSLPackage.CONSTANT_DEF_LIST:
				sequence_ConstantDefList(context, (ConstantDefList) semanticObject); 
				return; 
			case FSMDSLPackage.DEFAULT_PREDICATE:
				sequence_Default(context, (DefaultPredicate) semanticObject); 
				return; 
			case FSMDSLPackage.FSM:
				sequence_FSM(context, (FSM) semanticObject); 
				return; 
			case FSMDSLPackage.INPUT_PORT:
				if(context == grammarAccess.getFSMElementRule() ||
				   context == grammarAccess.getInputPortRule() ||
				   context == grammarAccess.getPortRule()) {
					sequence_InputPort(context, (InputPort) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getShortInputPortRule()) {
					sequence_ShortInputPort(context, (InputPort) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.LAYOUT_INFO:
				sequence_LayoutInfo(context, (LayoutInfo) semanticObject); 
				return; 
			case FSMDSLPackage.NOT_EXPR:
				sequence_Not(context, (NotExpr) semanticObject); 
				return; 
			case FSMDSLPackage.OR_EXPR:
				sequence_Or(context, (OrExpr) semanticObject); 
				return; 
			case FSMDSLPackage.OUTPUT_PORT:
				if(context == grammarAccess.getFSMElementRule() ||
				   context == grammarAccess.getOutputPortRule() ||
				   context == grammarAccess.getPortRule()) {
					sequence_OutputPort(context, (OutputPort) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getShortOutputPortRule()) {
					sequence_ShortOutputPort(context, (OutputPort) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.PORT_REF:
				sequence_PortRef(context, (PortRef) semanticObject); 
				return; 
			case FSMDSLPackage.PREDICATE_STMT:
				sequence_PredicateStmt(context, (PredicateStmt) semanticObject); 
				return; 
			case FSMDSLPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case FSMDSLPackage.STATE:
				if(context == grammarAccess.getFSMElementRule()) {
					sequence_FSMElement_LongState_ShortState(context, (State) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLongStateRule()) {
					sequence_LongState(context, (State) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getShortStateRule()) {
					sequence_ShortState(context, (State) semanticObject); 
					return; 
				}
				else break;
			case FSMDSLPackage.TRANSITION:
				if(context == grammarAccess.getFSMElementRule()) {
					sequence_DotTransition_FSMElement_GotoTransition(context, (Transition) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getDotTransitionRule()) {
					sequence_DotTransition(context, (Transition) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getGotoTransitionRule()) {
					sequence_GotoTransition(context, (Transition) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (args+=And_AndExpr_1_0 args+=Cmp)
	 */
	protected void sequence_And(EObject context, AndExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (args+=Cmp_CmpExpr_1_0 (op='==' | op='/=') args+=Primary)
	 */
	protected void sequence_Cmp(EObject context, CmpExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (layout=LayoutInfo commands+=Command*)
	 */
	protected void sequence_CommandList(EObject context, CommandList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (cst+=ConstantDef cst+=ConstantDef*)? 
	 *         (in+=ShortInputPort in+=ShortInputPort*)? 
	 *         (out+=ShortOutputPort out+=ShortOutputPort*)? 
	 *         commands+=Command 
	 *         commands+=Command*
	 *     )
	 */
	protected void sequence_CommandStmt(EObject context, CommandStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=[OutputPort|ID] value=Or)
	 */
	protected void sequence_Command(EObject context, Command semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.COMMAND__NAME));
			if(transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.COMMAND__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCommandAccess().getNameOutputPortIDTerminalRuleCall_0_0_1(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommandAccess().getValueOrParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (args+=Or args+=Or*)
	 */
	protected void sequence_ConcatExpr(EObject context, ConcatExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     const=[ConstantDef|ID]
	 */
	protected void sequence_ConstRef(EObject context, ConstRef semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.CONST_REF__CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.CONST_REF__CONST));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getConstRefAccess().getConstConstantDefIDTerminalRuleCall_2_0_1(), semanticObject.getConst());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (constants+=ConstantDef constants+=ConstantDef*)
	 */
	protected void sequence_ConstantDefList(EObject context, ConstantDefList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID value=Constant)
	 */
	protected void sequence_ConstantDef(EObject context, ConstantDef semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__NAME));
			if(transientValues.isValueTransient(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FSMDSLPackage.Literals.CONSTANT_DEF__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getConstantDefAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConstantDefAccess().getValueConstantParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (value=BIN | value=HEX)
	 */
	protected void sequence_Constant(EObject context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {DefaultPredicate}
	 */
	protected void sequence_Default(EObject context, DefaultPredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((src=[State|ID]? dst=[State|ID] predicate=Predicate? layout=LayoutInfo) | (dst=[State|ID] predicate=Predicate? layout=LayoutInfo))
	 */
	protected void sequence_DotTransition_FSMElement_GotoTransition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (src=[State|ID]? dst=[State|ID] predicate=Predicate? layout=LayoutInfo)
	 */
	protected void sequence_DotTransition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (name=ID code=BIN? layout=LayoutInfo commandList=CommandList? transition+=DotTransition*) | 
	 *         (name=ID code=BIN? layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*)
	 *     )
	 */
	protected void sequence_FSMElement_LongState_ShortState(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         layout=LayoutInfo 
	 *         constants+=ConstantDef* 
	 *         (in+=InputPort+ | out+=OutputPort+)+ 
	 *         width=INT 
	 *         start=[State|ID] 
	 *         (states+=LongState | states+=ShortState)*
	 *     )
	 */
	protected void sequence_FSM(EObject context, FSM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dst=[State|ID] predicate=Predicate? layout=LayoutInfo)
	 */
	protected void sequence_GotoTransition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID width=INT? layout=LayoutInfo)
	 */
	protected void sequence_InputPort(EObject context, InputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((x=INT y=INT (width=INT height=INT)?)?)
	 */
	protected void sequence_LayoutInfo(EObject context, LayoutInfo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID code=BIN? layout=LayoutInfo commandList=CommandList? transition+=DotTransition*)
	 */
	protected void sequence_LongState(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     args+=Primary
	 */
	protected void sequence_Not(EObject context, NotExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (args+=Or_OrExpr_1_0 args+=And)
	 */
	protected void sequence_Or(EObject context, OrExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID width=INT? layout=LayoutInfo)
	 */
	protected void sequence_OutputPort(EObject context, OutputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (port=[Port|ID] range=Range?)
	 */
	protected void sequence_PortRef(EObject context, PortRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((cst+=ConstantDef cst+=ConstantDef*)? (in+=ShortInputPort in+=ShortInputPort*)? predicate=Predicate)
	 */
	protected void sequence_PredicateStmt(EObject context, PredicateStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ub=INT? lb=INT)
	 */
	protected void sequence_Range(EObject context, Range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((commands+=Command+ layout=LayoutInfo)?)
	 */
	protected void sequence_ShortCommandList(EObject context, CommandList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID width=INT?)
	 */
	protected void sequence_ShortInputPort(EObject context, InputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID width=INT?)
	 */
	protected void sequence_ShortOutputPort(EObject context, OutputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID code=BIN? layout=LayoutInfo commandList=ShortCommandList transition+=GotoTransition*)
	 */
	protected void sequence_ShortState(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
