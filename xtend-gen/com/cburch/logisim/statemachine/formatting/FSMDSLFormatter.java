/**
 * generated by Xtext
 */
package com.cburch.logisim.statemachine.formatting;

import com.cburch.logisim.statemachine.services.FSMDSLGrammarAccess;
import com.google.inject.Inject;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class FSMDSLFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private FSMDSLGrammarAccess _fSMDSLGrammarAccess;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    c.setLinewrap().after(this._fSMDSLGrammarAccess.getLayoutInfoRule());
    c.setLinewrap().after(this._fSMDSLGrammarAccess.getCommandRule());
    c.setLinewrap().after(this._fSMDSLGrammarAccess.getCommandListRule());
    c.setLinewrap().after(this._fSMDSLGrammarAccess.getCommandRule());
    c.setLinewrap(0, 1, 2).before(this._fSMDSLGrammarAccess.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 2).before(this._fSMDSLGrammarAccess.getML_COMMENTRule());
    c.setLinewrap(0, 1, 1).after(this._fSMDSLGrammarAccess.getML_COMMENTRule());
  }
}
